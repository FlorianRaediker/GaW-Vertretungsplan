{"version":3,"sources":["_main-theme.scss","_theme-variables.scss","../../../../node_modules/bootstrap/scss/_functions.scss"],"names":[],"mappings":"AAKA,iCACI,UCiBkB,CDhBlB,wBCYiB,CDXjB,oBCWiB,CDVpB,KAGG,wBCegB,CDdnB,WAGG,wBCasB,CDZzB,6BAGG,sBACI,2BCSsB,CDRzB,gCAGG,2CAAwD,CACxD,0CAAuD,CACvD,gCAAiC,CACpC,CAGL,OAAS,wBAAyB,CAAI,KAO9B,UCfc,CDgBd,wBCjBa,CDkBhB,YAGG,wBAA6B,CAChC,kCAGG,UCxBc,CDyBd,wBCrBY,CDsBZ,oBCdwB,CDe3B,oEAGG,mCAAoC,CACvC,2EAIG,gLEG0E,CFF7E,oBAGG,WAAY,CACZ,gBAAiB,CACjB,YAAa,CAChB,sFAGG,WAAY,CACf,WAGG,wBAAwC,CACxC,oBAAoC,CACvC,6BAGG,uDACI,wBClDW,CDmDd","file":"main-dark.css","sourcesContent":["@import \"theme-variables\";\n\n@import \"node_modules/bootstrap/scss/mixins/breakpoints\";\n\n\n.nav-pills .nav-link.active, .btn {\n    color: $body-color;\n    background-color: $primary;\n    border-color: $primary;\n}\n\n.box {\n    background-color: $box-bg;\n}\n\n.title-box {\n    background-color: $title-box-bg;\n}\n\n@include media-breakpoint-down(xs) {\n    .box:not(:last-child) {\n        border-bottom-color: $box-border-color;\n    }\n\n    .box:last-child:not(.title-box) {\n        border-bottom-right-radius: $border-radius-lg !important;\n        border-bottom-left-radius: $border-radius-lg !important;\n        box-shadow: 0 5px 5px 0 #7575754f;\n    }\n}\n\nfooter { background-color: #242424; }\n\n\n@if ($theme == \"dark\") {\n    // With a light theme, these styles are the default and don't need to be changed.\n    // With a dark theme, change them to appropriate colors:\n    body {\n        color: $body-color;\n        background-color: $body-bg;\n    }\n\n    .text-muted {\n        color: $text-muted !important;\n    }\n\n    .form-control, .form-control:focus {\n        color: $body-color;\n        background-color: $box-bg;\n        border-color: $input-border-color;\n    }\n\n    .custom-control-input:not(:checked) ~ .custom-control-label::before {\n        background-color: $box-bg !important;\n    }\n\n\n    .custom-radio .custom-control-input:checked ~ .custom-control-label::after {\n        background-image: escape-svg(url(\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='-4 -4 8 8'><circle r='3' fill='#{$box-bg}'/></svg>\"));\n    }\n\n    .close, .close:hover {\n        color: white;\n        text-shadow: none;\n        opacity: 0.75;\n    }\n\n    .close:not(:disabled):not(.disabled):hover, .close:not(:disabled):not(.disabled):focus {\n        opacity: 0.5;\n    }\n\n    .btn:hover {\n        background-color: darken($primary, 7.5%);\n        border-color: darken($primary, 7.5%);\n    }\n\n    @include media-breakpoint-down(xs) {\n        .box:not(.title-box), .form-control, .form-control:focus {\n            background-color: $box-bg-xs;\n        }\n    }\n}\n","$theme: \"light\" !default;\n\n$primary: #fc8600;\n$secondary: #f7d45e;\n\n$body-bg: #fc8600;\n$body-color: null;  // null gets replaced with value from Bootstrap's _variables.scss\n\n$text-muted: null;\n\n$box-bg: white;\n$box-bg-xs: null;\n$title-box-bg: $secondary;\n$box-border-color: grey;\n\n$input-border-color: null;\n$input-bg: null;\n\n@if ($theme == \"dark\") {\n    $primary: #c07217;\n    $secondary: #f7d45e;\n\n    $body-bg: #050505;\n    $body-color: white;\n\n    $text-muted: #ced4da;  //$gray-400 instead of $gray-600\n\n    $box-bg: #1d1d1d;\n    $box-bg-xs: #151515;\n    $title-box-bg: #2d2d2d;\n    $box-border-color: #818181;\n\n    $yiq-text-dark:             white;\n    $yiq-text-light:            #212529;\n\n    $input-border-color: #6c757d;  // $gray-600 instead of $gray-400\n    $input-bg: #292828;\n}\n\n@import \"node_modules/bootstrap/scss/functions\";\n@import \"node_modules/bootstrap/scss/variables\";\n","// Bootstrap functions\n//\n// Utility mixins and functions for evaluating source code across our variables, maps, and mixins.\n\n// Ascending\n// Used to evaluate Sass maps like our grid breakpoints.\n@mixin _assert-ascending($map, $map-name) {\n  $prev-key: null;\n  $prev-num: null;\n  @each $key, $num in $map {\n    @if $prev-num == null or unit($num) == \"%\" or unit($prev-num) == \"%\" {\n      // Do nothing\n    } @else if not comparable($prev-num, $num) {\n      @warn \"Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !\";\n    } @else if $prev-num >= $num {\n      @warn \"Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !\";\n    }\n    $prev-key: $key;\n    $prev-num: $num;\n  }\n}\n\n// Starts at zero\n// Used to ensure the min-width of the lowest breakpoint starts at 0.\n@mixin _assert-starts-at-zero($map, $map-name: \"$grid-breakpoints\") {\n  @if length($map) > 0 {\n    $values: map-values($map);\n    $first-value: nth($values, 1);\n    @if $first-value != 0 {\n      @warn \"First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.\";\n    }\n  }\n}\n\n// Replace `$search` with `$replace` in `$string`\n// Used on our SVG icon backgrounds for custom forms.\n//\n// @author Hugo Giraudel\n// @param {String} $string - Initial string\n// @param {String} $search - Substring to replace\n// @param {String} $replace ('') - New value\n// @return {String} - Updated string\n@function str-replace($string, $search, $replace: \"\") {\n  $index: str-index($string, $search);\n\n  @if $index {\n    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\n  }\n\n  @return $string;\n}\n\n// See https://codepen.io/kevinweber/pen/dXWoRw\n//\n// Requires the use of quotes around data URIs.\n\n@function escape-svg($string) {\n  @if str-index($string, \"data:image/svg+xml\") {\n    @each $char, $encoded in $escaped-characters {\n      // Do not escape the url brackets\n      @if str-index($string, \"url(\") == 1 {\n        $string: url(\"#{str-replace(str-slice($string, 6, -3), $char, $encoded)}\");\n      } @else {\n        $string: str-replace($string, $char, $encoded);\n      }\n    }\n  }\n\n  @return $string;\n}\n\n// Color contrast\n@function color-yiq($color, $dark: $yiq-text-dark, $light: $yiq-text-light) {\n  $r: red($color);\n  $g: green($color);\n  $b: blue($color);\n\n  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;\n\n  @if ($yiq >= $yiq-contrasted-threshold) {\n    @return $dark;\n  } @else {\n    @return $light;\n  }\n}\n\n// Retrieve color Sass maps\n@function color($key: \"blue\") {\n  @return map-get($colors, $key);\n}\n\n@function theme-color($key: \"primary\") {\n  @return map-get($theme-colors, $key);\n}\n\n@function gray($key: \"100\") {\n  @return map-get($grays, $key);\n}\n\n// Request a theme color level\n@function theme-color-level($color-name: \"primary\", $level: 0) {\n  $color: theme-color($color-name);\n  $color-base: if($level > 0, $black, $white);\n  $level: abs($level);\n\n  @return mix($color-base, $color, $level * $theme-color-interval);\n}\n\n// Return valid calc\n@function add($value1, $value2, $return-calc: true) {\n  @if $value1 == null {\n    @return $value2;\n  }\n\n  @if $value2 == null {\n    @return $value1;\n  }\n\n  @if type-of($value1) == number and type-of($value2) == number and comparable($value1, $value2) {\n    @return $value1 + $value2;\n  }\n\n  @return if($return-calc == true, calc(#{$value1} + #{$value2}), $value1 + unquote(\" + \") + $value2);\n}\n\n@function subtract($value1, $value2, $return-calc: true) {\n  @if $value1 == null and $value2 == null {\n    @return null;\n  }\n\n  @if $value1 == null {\n    @return -$value2;\n  }\n\n  @if $value2 == null {\n    @return $value1;\n  }\n\n  @if type-of($value1) == number and type-of($value2) == number and comparable($value1, $value2) {\n    @return $value1 - $value2;\n  }\n\n  @return if($return-calc == true, calc(#{$value1} - #{$value2}), $value1 + unquote(\" - \") + $value2);\n}\n"]}