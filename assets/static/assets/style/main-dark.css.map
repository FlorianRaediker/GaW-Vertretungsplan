{"version":3,"sources":["main-dark.scss","_variables-dark.scss","../../../../node_modules/bootstrap/scss/_functions.scss"],"names":[],"mappings":"AASA,KACI,UCTc,CDUd,wBCXa,CDYhB,YAEa,wBAA6B,CAAI,kCAG3C,UChBc,CDiBd,wBCZY,CDaZ,oBCJc,CDKjB,oEAEqE,mCAAoC,CAAI,2EAI1G,gLEmC8E,CFlCjF,oBAGG,WAAY,CACZ,gBAAiB,CACjB,YAAa,CAChB,sFAGG,WAAY,CACf,iCAKG,UCzCc,CD0Cd,wBCxCa,CDyCb,oBCzCa,CD0ChB,WAGG,wBAAwC,CACxC,oBAAoC,CACvC,KAEM,wBC9CS,CD8CoB,WAGhC,wBAAyB,CAK5B,6BAGG,sBAAwB,yBAA0B,CAAI,gCAGlD,2CAAwD,CACxD,0CAAuD,CACvD,gCAAiC,CACpC,CAGL,OAAS,wBAAyB","file":"main-dark.css","sourcesContent":["@import \"variables-dark\";\r\n\r\n@import \"node_modules/bootstrap/scss/functions\";\r\n@import \"node_modules/bootstrap/scss/variables\";\r\n@import \"node_modules/bootstrap/scss/mixins/breakpoints\";\r\n\r\n\r\n// BOOTSTRAP STYLES\r\n\r\nbody {\r\n    color: $body-color;\r\n    background-color: $body-bg;\r\n}\r\n\r\n.text-muted { color: $text-muted !important; }\r\n\r\n.form-control, .form-control:focus {\r\n    color: $body-color;\r\n    background-color: $box-bg;\r\n    border-color: $input-border-color;\r\n}\r\n\r\n.custom-control-input:not(:checked) ~ .custom-control-label::before { background-color: $box-bg !important; }\r\n\r\n\r\n.custom-radio .custom-control-input:checked ~ .custom-control-label::after {\r\n    background-image: escape-svg(url(\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='-4 -4 8 8'><circle r='3' fill='#{$box-bg}'/></svg>\"));\r\n}\r\n\r\n.close, .close:hover {\r\n    color: white;\r\n    text-shadow: none;\r\n    opacity: 0.75;\r\n}\r\n\r\n.close:not(:disabled):not(.disabled):hover, .close:not(:disabled):not(.disabled):focus {\r\n    opacity: 0.5;\r\n}\r\n\r\n// STYLES FROM main.scss\r\n\r\n.nav-pills .nav-link.active, .btn {\r\n    color: $body-color;\r\n    background-color: $primary;\r\n    border-color: $primary;\r\n}\r\n\r\n.btn:hover {\r\n    background-color: darken($primary, 7.5%);\r\n    border-color: darken($primary, 7.5%);\r\n}\r\n\r\n.box { background-color: $box-bg; }\r\n\r\n.title-box {\r\n    background-color: #353535;\r\n\r\n    .selection {\r\n\r\n    }\r\n}\r\n\r\n@include media-breakpoint-down(xs) {\r\n    .box:not(:last-child) { border-bottom-color: black; }\r\n\r\n    .box:last-child:not(.title-box) {\r\n        border-bottom-right-radius: $border-radius-lg !important;\r\n        border-bottom-left-radius: $border-radius-lg !important;\r\n        box-shadow: 0 5px 5px 0 #7575754f;\r\n    }\r\n}\r\n\r\nfooter { background-color: #242424; }\r\n","$body-bg: #201F1F;\r\n$body-color: white;\r\n\r\n$primary: #c07217;\r\n$secondary: #f7d45e;\r\n\r\n$box-bg: #292828;\r\n\r\n$yiq-text-dark:             white;\r\n$yiq-text-light:            #212529;\r\n\r\n$white:    #000;\r\n$gray-100: #212529;\r\n$gray-200: #343a40;\r\n$gray-300: #495057;\r\n$gray-400: #6c757d;\r\n$gray-500: #adb5bd;\r\n$gray-600: #ced4da;\r\n$gray-700: #dee2e6;\r\n$gray-800: #e9ecef;\r\n$gray-900: #f8f9fa;\r\n$black:    #fff;\r\n\r\n$input-bg: #292828;\r\n","// Bootstrap functions\n//\n// Utility mixins and functions for evaluating source code across our variables, maps, and mixins.\n\n// Ascending\n// Used to evaluate Sass maps like our grid breakpoints.\n@mixin _assert-ascending($map, $map-name) {\n  $prev-key: null;\n  $prev-num: null;\n  @each $key, $num in $map {\n    @if $prev-num == null or unit($num) == \"%\" or unit($prev-num) == \"%\" {\n      // Do nothing\n    } @else if not comparable($prev-num, $num) {\n      @warn \"Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !\";\n    } @else if $prev-num >= $num {\n      @warn \"Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !\";\n    }\n    $prev-key: $key;\n    $prev-num: $num;\n  }\n}\n\n// Starts at zero\n// Used to ensure the min-width of the lowest breakpoint starts at 0.\n@mixin _assert-starts-at-zero($map, $map-name: \"$grid-breakpoints\") {\n  @if length($map) > 0 {\n    $values: map-values($map);\n    $first-value: nth($values, 1);\n    @if $first-value != 0 {\n      @warn \"First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.\";\n    }\n  }\n}\n\n// Replace `$search` with `$replace` in `$string`\n// Used on our SVG icon backgrounds for custom forms.\n//\n// @author Hugo Giraudel\n// @param {String} $string - Initial string\n// @param {String} $search - Substring to replace\n// @param {String} $replace ('') - New value\n// @return {String} - Updated string\n@function str-replace($string, $search, $replace: \"\") {\n  $index: str-index($string, $search);\n\n  @if $index {\n    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\n  }\n\n  @return $string;\n}\n\n// See https://codepen.io/kevinweber/pen/dXWoRw\n//\n// Requires the use of quotes around data URIs.\n\n@function escape-svg($string) {\n  @if str-index($string, \"data:image/svg+xml\") {\n    @each $char, $encoded in $escaped-characters {\n      // Do not escape the url brackets\n      @if str-index($string, \"url(\") == 1 {\n        $string: url(\"#{str-replace(str-slice($string, 6, -3), $char, $encoded)}\");\n      } @else {\n        $string: str-replace($string, $char, $encoded);\n      }\n    }\n  }\n\n  @return $string;\n}\n\n// Color contrast\n@function color-yiq($color, $dark: $yiq-text-dark, $light: $yiq-text-light) {\n  $r: red($color);\n  $g: green($color);\n  $b: blue($color);\n\n  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;\n\n  @if ($yiq >= $yiq-contrasted-threshold) {\n    @return $dark;\n  } @else {\n    @return $light;\n  }\n}\n\n// Retrieve color Sass maps\n@function color($key: \"blue\") {\n  @return map-get($colors, $key);\n}\n\n@function theme-color($key: \"primary\") {\n  @return map-get($theme-colors, $key);\n}\n\n@function gray($key: \"100\") {\n  @return map-get($grays, $key);\n}\n\n// Request a theme color level\n@function theme-color-level($color-name: \"primary\", $level: 0) {\n  $color: theme-color($color-name);\n  $color-base: if($level > 0, $black, $white);\n  $level: abs($level);\n\n  @return mix($color-base, $color, $level * $theme-color-interval);\n}\n\n// Return valid calc\n@function add($value1, $value2, $return-calc: true) {\n  @if $value1 == null {\n    @return $value2;\n  }\n\n  @if $value2 == null {\n    @return $value1;\n  }\n\n  @if type-of($value1) == number and type-of($value2) == number and comparable($value1, $value2) {\n    @return $value1 + $value2;\n  }\n\n  @return if($return-calc == true, calc(#{$value1} + #{$value2}), $value1 + unquote(\" + \") + $value2);\n}\n\n@function subtract($value1, $value2, $return-calc: true) {\n  @if $value1 == null and $value2 == null {\n    @return null;\n  }\n\n  @if $value1 == null {\n    @return -$value2;\n  }\n\n  @if $value2 == null {\n    @return $value1;\n  }\n\n  @if type-of($value1) == number and type-of($value2) == number and comparable($value1, $value2) {\n    @return $value1 - $value2;\n  }\n\n  @return if($return-calc == true, calc(#{$value1} - #{$value2}), $value1 + unquote(\" - \") + $value2);\n}\n"]}