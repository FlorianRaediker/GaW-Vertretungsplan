(function(){'use strict';window.addEventListener("error",a=>{const b={type:Object.getPrototypeOf(a.error).name};Object.getOwnPropertyNames(a.error).forEach(c=>b[c]=a.error[c]);fetch("/api/report-error",{method:"post",body:new URLSearchParams({message:a.message,filename:a.filename,lineno:a.lineno,colno:a.colno,error:JSON.stringify(b)})})});const d=window.location.pathname.split("/",2)[1],e=document.getElementById("selectionInput").value;const g=document.getElementsByClassName("date");
function k(){const a=new Date;if(0<g.length&&g[0].innerHTML===a.getDate()+"."+(a.getMonth()+1)+"."+a.getFullYear()){const b=a.getHours(),c=a.getMinutes();for(let f of[["1",8,35],["2",9,25],["3",10,30],["4",11,15],["5",12,20],["6",13,10],["7",14,35],["8",15,25],["9",16,20],["10",17,5]])if(f[1]<b||f[1]===b&&f[2]<=c)for(let h of document.getElementsByClassName("lesson"+f[0]))h.classList.add("grey");else{setTimeout(k,(new Date(a.getFullYear(),a.getMonth(),a.getDate(),f[1],f[2])).getTime()-a.getTime());
break}}}k();const l=document.getElementById("toggle-notifications"),m=document.getElementById("notifications-info"),p=document.getElementById("notifications-info-none"),q=document.getElementById("notifications-info-all"),r=document.getElementById("notifications-info-selection"),t=document.getElementById("notifications-info-blocked"),u=document.getElementById("notifications-info-failed");
function v(a){var b="=".repeat((4-a.length%4)%4);a=(a+b).replace(/-/g,"+").replace(/_/g,"/");a=atob(a);b=new Uint8Array(a.length);for(let c=0;c<a.length;++c)b[c]=a.charCodeAt(c);return b}
function w(a,b){return new Promise((c,f)=>{b.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:v("BDu6tTwQHFlGb36-pLCzwMdgumSlyj_vqMR3I1KahllZd3v2se-LM25vhP3Yv_y0qXYx_KPOVOD2EYTaJaibzo8")}).then(h=>{console.log("Got push subscription:",h,a?"(active)":"(not active)");fetch(window.location.origin+window.location.pathname+"api/subscribe-push",{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify({subscription:h.toJSON(),selection:e,is_active:a})}).then(n=>n.json()).then(n=>
{n.ok?(console.log("Push subscription successful"),c()):(console.error("Push subscription failed",n),f())})}).catch(h=>{console.error("Push subscription failed",h);f(h)})})}let x;
function y(a,b){console.log("Setting notification-state to",a);x=a;window.localStorage.setItem(d+"-notification-state",x);switch(x){case "granted-and-enabled":l.checked=!0;l.disabled=!1;m.innerHTML=""!==e?r.innerHTML.replace("{selection}",e):q.innerHTML;w(!0,b).catch(c=>{console.error("Push subscription failed",c);y("failed",b)});break;case "denied":l.checked=!1;l.disabled=!0;m.innerHTML=t.innerHTML;break;case "failed":l.checked=!1;l.disabled=!0;m.innerHTML=u.innerHTML;break;case "granted-and-disabled":w(!1,
b).catch(c=>{console.error("Push subscription failed",c);y("failed",b)});l.checked=!1;l.disabled=!1;m.innerHTML=p.innerHTML;break;default:case "default":l.checked=!1,l.disabled=!1,m.innerHTML=p.innerHTML}}
function z(a){function b(){return x.startsWith(Notification.permission)?!1:("granted"===Notification.permission?y("granted-and-disabled",a):y(Notification.permission,a),!0)}document.getElementById("notifications-not-available-alert").hidden=!0;document.getElementById("toggle-notifications-wrapper").hidden=!1;l.addEventListener("change",()=>{l.checked?window.Notification.requestPermission().then(c=>{switch(c){case "granted":x="granted-and-enabled";break;default:x=c}y(x,a)}):"granted-and-enabled"===
x&&y("granted-and-disabled",a)});window.addEventListener("focus",b);x=window.localStorage.getItem(d+"-notification-state");null==x&&(x="default");b()||y(x,a)}
"serviceWorker"in navigator?window.addEventListener("load",()=>{navigator.serviceWorker.ready.then(a=>{console.log("ServiceWorker is active:",a.active);"Notification"in window?"localStorage"in window?"PushManager"in window?z(a):console.warn("PushManager is not supported"):console.warn("localStorage is not supported"):console.warn("Notification is not supported")});navigator.serviceWorker.register("/sw.min.js").then(a=>{console.log("ServiceWorker registration successful:",a)}).catch(a=>console.warn("ServiceWorker registration failed:",
a))}):console.warn("serviceWorker is not supported");const A=document.getElementById("online-status");let B=null;function C(){A.textContent="Keine Verbindung zum Server";A.classList.add("offline");A.classList.remove("online")}
function D(a=null){B=new WebSocket(("http:"===window.location.protocol?"ws:":"wss:")+"//"+window.location.host+window.location.pathname+"api/wait-for-updates");B.addEventListener("open",b=>{console.log("WebSocket opened",b);A.textContent="Aktuell";A.classList.add("online");A.classList.remove("offline");a&&a()});B.addEventListener("close",b=>{console.log("WebSocket closed",b);C()});B.addEventListener("message",b=>{b=JSON.parse(b.data);console.log("WebSocket message",b);switch(b.type){case "new_substitutions":window.location.reload();
break;default:console.warn("Unknown WebSocket message type")}})}D();function E(){B.readyState===B.OPEN?B.send(JSON.stringify({type:"check_status",status:document.getElementById("status").textContent})):D(()=>B.send(JSON.stringify({type:"check_status",status:document.getElementById("status").textContent})))}window.addEventListener("focus",()=>{console.log("focus, checking for new substitutions");E()});window.addEventListener("online",()=>{console.log("online, checking for new substitutions");E()});
window.addEventListener("offline",()=>{console.log("offline, closing WebSocket connection");C();B.close()});}).call(this);

//# sourceMappingURL=substitutions.min.js.map
