(function(){'use strict';function e(a,b=null){fetch("/api/report-error",{method:"post",body:new URLSearchParams({name:a.name,message:(null==b?void 0:b.message)||a.message,description:a.description,number:a.number,filename:(null==b?void 0:b.filename)||a.fileName,lineno:(null==b?void 0:b.lineno)||a.lineNumber,colno:(null==b?void 0:b.colno)||a.columnNumber,stack:(null==b?void 0:b.stack)||a.stack,user_agent:navigator.userAgent})}).catch(c=>console.error("reporting error failed",c))}
window.addEventListener("error",a=>{e(a.error,a)});window.addEventListener("unhandledrejection",a=>{console.log("unhandledrejection",a);e(a.reason)});const h=window.location.pathname.split("/",2)[1],k=document.getElementById("selectionInput").value;
if(window.location.hash.startsWith("#timetable:"))try{let [,a,b]=window.location.hash.split(":");b=atob(b);let c=!0,f;if(150!==b.length)console.warn("Timetable in URL has wrong length:",b.length,"instead of",150,b),c=!1;else{f=[];for(let d=0;5>d;d++){let m=[];f.push(m);for(let g=0;10>g;g++){let n=b.substr(30*d+3*g,3).trim();""===n&&(n=null);m.push(n)}}}if(c){let d;try{(d=JSON.parse(window.localStorage.getItem(h+"-timetables")))||(d={})}catch{d={}}a=a.toUpperCase();let m=a in d?"Die aufgerufenen URL enth\u00e4lt einen Stundenplan f\u00fcr "+
a+". Soll der aktuell gesetzte Stundenplan f\u00fcr "+a+" durch diesen ersetzt werden?":"Die aufgerufene URL enth\u00e4lt einen Stundenplan f\u00fcr "+a+". Diesen Stundenplan setzen?";if(k){let g=!1;for(let n of k.split(", "))if(n.toUpperCase()===a){g=!0;break}g||(m+=" Achtung: Der Stundenplan wird erst angewendet, wenn "+a+" auch ausgew\u00e4hlt ist.")}else m+=" Achtung: Der Stundenplan wird erst angewendet, wenn Vertretungen ausgew\u00e4hlt sind.";confirm(m)&&(d[a]=f,window.localStorage.setItem(h+
"-timetables",JSON.stringify(d)));window.location.hash=""}}catch(a){console.error("Error while retrieving timetable from URL",a),e(a)};const l=document.getElementsByClassName("date");
function p(){const a=new Date;if(0<l.length&&l[0].innerHTML===a.getDate()+"."+(a.getMonth()+1)+"."+a.getFullYear()){const b=a.getHours(),c=a.getMinutes();for(let f of[["1",8,35],["2",9,25],["3",10,30],["4",11,15],["5",12,20],["6",13,10],["7",14,35],["8",15,25],["9",16,20],["10",17,5]])if(f[1]<b||f[1]===b&&f[2]<=c)for(let d of document.getElementsByClassName("lesson"+f[0]))d.classList.add("grey");else{setTimeout(p,(new Date(a.getFullYear(),a.getMonth(),a.getDate(),f[1],f[2])).getTime()-a.getTime());
break}}}p();window.addEventListener("focus",()=>p());let q,r=document.getElementById("status").textContent;try{if(q=JSON.parse(window.localStorage.getItem(h+"-seen-substitutions")),q.status!==r){let a=Date.now();for(let b of Object.keys(q.seenSubstitutions))b<=a&&delete q.seenSubstitutions[b];for(let [b,c]of Object.entries(q.newSubstitutions))b>a&&(b in q.seenSubstitutions?q.seenSubstitutions[b].push(...c):q.seenSubstitutions[b]=c);q.newSubstitutions={};q.status=r}}catch{}q||(q={seenSubstitutions:{},newSubstitutions:{},status:r});
for(let a of document.getElementsByClassName("substitutions-box")){const b=a.querySelector(".substitutions-table tbody");if(b){const c=a.querySelector(".date").textContent.trim();let [,f,d,m]=c.match(/(\d\d?).(\d\d?).(\d\d\d\d)/);const g=Date.UTC(m,d-1,f+1);g in q.seenSubstitutions||(q.seenSubstitutions[g]=[]);g in q.newSubstitutions||(q.newSubstitutions[g]=[]);let n;for(let z of b.children){let B=z.querySelector(".group-name");null!=B&&(n=B.textContent.trim());let v=n;for(let C of z.children)C.classList.contains(".group-name")||
(v+="#"+C.textContent.trim());q.seenSubstitutions[g].includes(v)||(z.classList.add("new-subs"),q.newSubstitutions[g].includes(v)||q.newSubstitutions[g].push(v))}}}window.localStorage.setItem(h+"-seen-substitutions",JSON.stringify(q));const t=document.getElementById("toggle-notifications"),u=document.getElementById("notifications-info"),w=document.getElementById("notifications-info-none"),x=document.getElementById("notifications-info-all"),y=document.getElementById("notifications-info-selection"),A=document.getElementById("notifications-info-blocked"),D=document.getElementById("notifications-info-failed");
function E(a){var b="=".repeat((4-a.length%4)%4);a=(a+b).replace(/-/g,"+").replace(/_/g,"/");a=atob(a);b=new Uint8Array(a.length);for(let c=0;c<a.length;++c)b[c]=a.charCodeAt(c);return b}
function F(a,b){return new Promise((c,f)=>{b.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:E("BDu6tTwQHFlGb36-pLCzwMdgumSlyj_vqMR3I1KahllZd3v2se-LM25vhP3Yv_y0qXYx_KPOVOD2EYTaJaibzo8")}).then(d=>{console.log("Got push subscription:",d,a?"(active)":"(not active)");return fetch(window.location.origin+window.location.pathname+"api/subscribe-push",{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify({subscription:d.toJSON(),selection:k,is_active:a})})}).then(d=>
d.json()).then(d=>{d.ok?(console.log("Push subscription successful"),c()):(console.error("Push subscription failed",d),f())}).catch(d=>{console.error("Push subscription failed",d);f(d)})})}let G;
function H(a,b){console.log("Setting notification-state to",a);G=a;window.localStorage.setItem(h+"-notification-state",G);switch(G){case "granted-and-enabled":t.checked=!0;t.disabled=!1;u.innerHTML=""!==k?y.innerHTML.replace("{selection}",k):x.innerHTML;F(!0,b).catch(c=>{console.error("Push subscription failed",c);H("failed",b)});break;case "denied":t.checked=!1;t.disabled=!0;u.innerHTML=A.innerHTML;break;case "failed":t.checked=!1;t.disabled=!0;u.innerHTML=D.innerHTML;break;case "granted-and-disabled":F(!1,
b).catch(c=>{console.error("Push subscription failed",c);H("failed",b)});t.checked=!1;t.disabled=!1;u.innerHTML=w.innerHTML;break;default:case "default":t.checked=!1,t.disabled=!1,u.innerHTML=w.innerHTML}}
function I(a){function b(){return G.startsWith(Notification.permission)?!1:("granted"===Notification.permission?H("granted-and-disabled",a):H(Notification.permission,a),!0)}document.getElementById("notifications-not-available-alert").hidden=!0;document.getElementById("toggle-notifications-wrapper").hidden=!1;t.addEventListener("change",()=>{t.checked?window.Notification.requestPermission().then(c=>{switch(c){case "granted":G="granted-and-enabled";break;default:G=c}H(G,a)}):"granted-and-enabled"===
G&&H("granted-and-disabled",a)});window.addEventListener("focus",b);G=window.localStorage.getItem(h+"-notification-state");null==G&&(G="default");b()||H(G,a)}
"serviceWorker"in navigator?window.addEventListener("load",()=>{navigator.serviceWorker.ready.then(a=>{console.log("ServiceWorker is active:",a.active);"Notification"in window?"localStorage"in window?"PushManager"in window?I(a):console.warn("PushManager is not supported"):console.warn("localStorage is not supported"):console.warn("Notification is not supported")});navigator.serviceWorker.register("/sw.min.js").then(a=>{console.log("ServiceWorker registration successful:",a)}).catch(a=>console.warn("ServiceWorker registration failed:",
a))}):console.warn("serviceWorker is not supported");const J=document.getElementById("online-status");let K=null;function L(){J.textContent="Aktuell";J.classList.add("online");J.classList.remove("offline","updating")}function M(){J.textContent="Offline";J.classList.add("offline");J.classList.remove("online","updating")}
function N(a=null){K=new WebSocket(("http:"===window.location.protocol?"ws:":"wss:")+"//"+window.location.host+window.location.pathname+"api/wait-for-updates");K.addEventListener("open",b=>{console.log("WebSocket opened",b);L();a&&a(b.target)});K.addEventListener("close",b=>{console.log("WebSocket closed",b);M()});K.addEventListener("message",b=>{b=JSON.parse(b.data);console.log("WebSocket message",b);switch(b.type){case "status":(b=b.status)&&(b===document.getElementById("status").textContent?L():
window.location.reload());break;default:console.warn("Unknown WebSocket message type",b.type)}})}N();function O(){J.textContent="Aktualisiere...";J.classList.add("updating");J.classList.remove("online","offline");K.readyState===K.OPEN?K.send(JSON.stringify({type:"get_status"})):N(a=>a.send(JSON.stringify({type:"get_status"})))}window.addEventListener("focus",()=>{console.log("focus, checking for new substitutions");O()});
window.addEventListener("online",()=>{console.log("online, checking for new substitutions");O()});window.addEventListener("offline",()=>{console.log("offline");M()});}).call(this);

//# sourceMappingURL=substitutions.min.js.map
