(function(){'use strict';function n(a,b=null){fetch("/api/report-error",{method:"post",body:new URLSearchParams({name:a.name,message:(null==b?void 0:b.message)||a.message,description:a.description,number:a.number,filename:(null==b?void 0:b.filename)||a.fileName,lineno:(null==b?void 0:b.lineno)||a.lineNumber,colno:(null==b?void 0:b.colno)||a.columnNumber,stack:(null==b?void 0:b.stack)||a.stack})}).catch(c=>console.error("reporting error failed",c))}self.addEventListener("error",a=>n(a.error,a));
self.addEventListener("unhandledrejection",a=>n(a.reason));const p=["/students/","/teachers/"],q="/assets/style/main.css /assets/style/main-dark.css /assets/style/substitutions.css /assets/style/substitutions-dark.css /assets/js/substitutions.min.js /assets/js/dark-theme.min.js /assets/js/timetables.min.js /favicon-32x32.png /android-chrome-192x192.png".split(" ");
self.addEventListener("install",a=>{a.waitUntil(caches.open("gawvertretung-v1").then(b=>Promise.all([Promise.all(p.map(c=>fetch(c+"?all&sw").then(d=>b.put(c,d))))])))});self.addEventListener("activate",a=>{a.waitUntil(caches.open("gawvertretung-v1").then(b=>{b.keys().then(c=>Promise.all(c.map(d=>{const e=new URL(d.url);if(!q.includes(e.pathname)&&!p.includes(e.pathname))return console.log("cache: delete old",d),b.delete(d)})))}))});
self.addEventListener("fetch",a=>{const b=new URL(a.request.url);console.log("requested",a.request.url,b.pathname);"/"===b.pathname?a.respondWith(Response.redirect("/students/")):p.includes(b.pathname)?a.respondWith((new Promise((c,d)=>{console.log("fetching",a.request);fetch(a.request).then(e=>{console.log("fetch successful",a.request.url);c(e.clone());caches.open("gawvertretung-v1").then(k=>k.put(b.pathname,e))},d)})).catch(()=>caches.open("gawvertretung-v1").then(c=>c.match(b.pathname,{ignoreSearch:!0}).then(d=>
{if(d)return d;console.log("no match for",a.request);return Promise.reject("no-match")})))):q.includes(b.pathname)?a.respondWith(new Promise(c=>caches.open("gawvertretung-v1").then(d=>d.match(a.request).then(e=>{e?(console.log("cache has up-to-date response for",a.request.url),c(e)):fetch(a.request).then(async k=>{console.log("cache is missing up-to-date response, fetching for",a.request.url);c(k.clone());await d.delete(a.request,{ignoreSearch:!0,ignoreVary:!0}).then(f=>console.log("deleted",f,a.request.url));
console.log("putting in cache:",a.request.url);await d.put(a.request,k)}).catch(()=>{c(d.match(a.request,{ignoreSearch:!0,ignoreVary:!0}))})})))):console.log("not using SW for request")});
self.addEventListener("push",async a=>{const b=a.data.json();let c=b.timestamp,d=b.plan_id,e=b.affected_groups_by_day;console.log("affectedGroups",e);for(let f of Object.values(e))f.groups=new Set(f.groups);let k=Date.now()/1E3;a.waitUntil(self.registration.getNotifications().then(f=>{for(var g of f)if(g.data&&g.data.plan_id===d){for(let [h,m]of Object.entries(g.data.affected_groups_by_day))console.log("expiryTime, currentTimestamp:",h,k),h>k&&(console.log("add",m.groups),h in e?(console.log("already in affectedGroups"),
m.groups.forEach(r=>e[h].groups.add(r))):(console.log("new day",m),e[h]=m));g.close()}for(let h of Object.values(e))h.groups=Array.from(h.groups);if(1===Object.keys(e).length){var l=Object.values(e)[0];f=l.name+": Neue Vertretungen";g=l.groups.join(", ")}else{f="Neue Vertretungen";g="";for(l of Object.values(e))g+=l.name+": "+l.groups.join(", ")+"\n"}l={body:g,icon:"android-chrome-512x512.png",badge:"monochrome-96x96.png",lang:"de",timestamp:c,vibrate:[300,100,400],data:{plan_id:d,url:(new URL("/"+
d+"/",self.location.origin)).href,affected_groups_by_day:e,notification_id:b.notification_id}};self.registration.showNotification(f,l);fetch("/api/event",{method:"post",body:new URLSearchParams({type:"notification_received",plan_id:d,notification_id:b.notification_id})})}))});
self.addEventListener("notificationclick",a=>{a.notification.close();a.waitUntil(Promise.all([self.clients.matchAll({type:"window"}).then(function(b){for(let c of b)if(b=new URL(c.url),console.log(a.notification.data.url,b.origin+b.pathname),b.origin+b.pathname===a.notification.data.url&&"focus"in c)return c.focus();if(self.clients.openWindow)return self.clients.openWindow(a.notification.data.url)}),self.registration.getNotifications().then(b=>{b.forEach(c=>{null!=c.data&&c.data.plan_id===a.notification.data.plan_id&&
c.close()})}),fetch("/api/event",{method:"post",body:new URLSearchParams({type:"notification_clicked",plan_id:a.notification.data.plan_id,notification_id:a.notification.data.notification_id})})]))});}).call(this);

//# sourceMappingURL=sw.min.js.map
